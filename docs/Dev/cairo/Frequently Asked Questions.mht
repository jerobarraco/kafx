Content-Type: multipart/related; start=<op.mhtml.1267263246546.6d443e79780d19f0@192.168.1.100>; boundary=----------isQBxJSTtAqOfiLALXktuF
Content-Location: http://www.cairographics.org/FAQ/
Subject: =?utf-8?Q?Frequently=20Asked=20Questions?=
MIME-Version: 1.0

------------isQBxJSTtAqOfiLALXktuF
Content-Disposition: inline; filename=default.htm
Content-Type: text/html; charset=UTF-8; name=default.htm
Content-ID: <op.mhtml.1267263246546.6d443e79780d19f0@192.168.1.100>
Content-Location: http://www.cairographics.org/FAQ/
Content-Transfer-Encoding: 8bit

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Frequently Asked Questions</title>

<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="stylesheet" href="../local.css" type="text/css" />


</head>
<body>

<div class="header">
<div id="logo">
  <a href="/"><img alt="cairo" src="/cairo-banner.png" /></a>
</div>
</div>

<div id="navcontainer">
<ul id="navlist">
<li><a href="/news/">News</a></li>
<li><a href="/download/">Download</a></li>
<li><a href="/documentation/">Documentation</a></li>
<li><a href="/contact/">Contact</a></li>
<li><a href="/examples/">Examples</a></li>
</ul>
</div>


<div id="title">
Frequently Asked Questions
</div>





<div id="content">
<p>This is a list of answers to questions that are frequently asked by
new users to cairo.</p>

<ol>
  <li><a href="#getting_started">Getting Started</a>
    <ol>
      <li><a href="#minimal_C_program">What would a minimal C program look like using cairo?</a></li>
      <li><a href="#compilation_flags">What compilation flags are required to compile that code?</a></li>
    </ol>
  </li>
  <li><a href="#drawing_questions">Drawing Questions</a>
    <ol>
      <li><a href="#clear_a_surface">How do I clear a surface?</a></li>
      <li><a href="#paint_from_a_surface">How do I paint from one surface to another?</a></li>
      <li><a href="#sharp_lines">How do I draw a sharp, single-pixel-wide line?</a></li>
      <li><a href="#using_pango">How do I use pango instead of cairo's "toy" text API?</a></li>
    </ol>
  </li>
  <li><a href="#performance_concerns">Performance Concerns</a>
    <ol>
      <li><a href="#clipping_performance">Clipping should only make things faster, right?</a></li>
      <li><a href="#profiling">My application's slower than I think it should be.  What can I do to help the cairo community find the problem?</a></li>
    </ol>
  </li>
</ol>

<h1 id="getting_started">Getting Started</h1>

<h2 id="minimal_C_program">What would a minimal C program look like using cairo?</h2>

<p>Create a file called <code>hello.c</code> containing </p>

<pre><code>#include &lt;cairo.h&gt;

int
main (int argc, char *argv[])
{
        cairo_surface_t *surface =
            cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 240, 80);
        cairo_t *cr =
            cairo_create (surface);

        cairo_select_font_face (cr, "serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
        cairo_set_font_size (cr, 32.0);
        cairo_set_source_rgb (cr, 0.0, 0.0, 1.0);
        cairo_move_to (cr, 10.0, 50.0);
        cairo_show_text (cr, "Hello, world");

        cairo_destroy (cr);
        cairo_surface_write_to_png (surface, "hello.png");
        cairo_surface_destroy (surface);
        return 0;
}
</code></pre>

<p>After compiling, run the resulting <code>hello</code> program you'll have a PNG
image file named <code>hello.png</code> with "Hello World" written in blue.</p>

<h2 id="compilation_flags">What compilation flags are required to compile that code?</h2>

<p>You will need to instruct the compiler where to find the cairo.h file,
(generally something like <code>-I /usr/include/cairo</code>), and tell the
linker where to find the cairo library and to link with it, (often
something like <code>-L /usr/lib -lcairo</code>).</p>

<p>But the exact flags and paths will depend on your compiler and your
installation of cairo. To simplify this, cairo uses pkg-config which
can help you determine the correct flags to use. If you have
pkg-config installed, then you can compile the above hello.c with:</p>

<pre><code>cc -o hello &#036;(pkg-config --cflags --libs cairo) hello.c
</code></pre>

<p>If you are using a csh style shell, use backquotes:</p>

<pre><code>cc -o hello `pkg-config --cflags --libs cairo` hello.c
</code></pre>

<p>If cairo is not installed to a system directory that pkg-config
is aware of, then you will need to tell pkg-config about the directory
by setting the <code>PKG_CONFIG_PATH</code> environment variable to point to the
directory into which cairo.pc is installed, For example, with bash:</p>

<pre><code>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
</code></pre>

<p>or for csh:</p>

<pre><code>setenv PKG_CONFIG_PATH /usr/local/lib/pkgconfig
</code></pre>

<h1 id="drawing_questions">Drawing questions</h1>

<h2 id="clear_a_surface">How do I clear a surface?</h2>

<p>If you want to clear your surface to a uniform, opaque color then it
is quite straightforward:</p>

<pre><code>/* Set surface to opaque color (r, g, b) */
cairo_set_source_rgb (cr, r, g, b);
cairo_paint (cr);
</code></pre>

<p>However, what if you want to clear the surface to something other than
an opaque color. Simply modifying the above code to use
"<code>cairo_set_source_rgba</code> (cr, 0, 0, 0, 0);" will not work since cairo
uses the <code>OVER</code> compositing operator by default, and blending something
entirely transparent <code>OVER</code> something else has no effect at
all. Instead, you can use the <code>SOURCE</code> operator which copies both color
and alpha values directly from the source to the destination instead
of blending:</p>

<pre><code>/* Set surface to translucent color (r, g, b, a) */
cairo_set_source_rgba (cr, r, g, b, a);
cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
cairo_paint (cr);
</code></pre>

<p>Of course, you won't want to forget to set the default
<code>CAIRO_OPERATOR_OVER</code> again when you're finished. And of course, the
most convenient habit for doing that is to just use
<code>cairo_save</code>/<code>cairo_restore</code> around the whole block:</p>

<pre><code>/* Set surface to translucent color (r, g, b, a) without disturbing graphics state. */
cairo_save (cr);
cairo_set_source_rgba (cr, r, g, b, a);
cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
cairo_paint (cr);
cairo_restore (cr);
</code></pre>

<p>Finally, to clear a surface to all transparent, one could simply use
<code>CAIRO_OPERATOR_CLEAR</code> instead of <code>CAIRO_OPERATOR_SOURCE</code>, in which case
the call to <code>cairo_set_source_rgba</code> would not be needed at all, (the
<code>CLEAR</code> operator always sets the destination to 0 in every channel
regardless of what the source pattern contains). But the above
approach with <code>CAIRO_OPERATOR_SOURCE</code> is a more general way to clear the
surface since it allows for "clearing" to a translucent color such as
50% red rather than just clearing to entirely transparent.</p>

<h2 id="paint_from_a_surface">How do I paint from one surface to another?</h2>

<p>If you have some surface <em>source</em> which you'd like to paint to some
surface <em>destination</em> at position (<code>x</code>, <code>y</code>) you would use code as
follows:</p>

<pre><code>cairo_t *cr = cairo_create (destination);
cairo_set_source_surface (cr, source, x, y);
cairo_paint (cr);
</code></pre>

<p>Note that the paint operation will copy the entire surface. If you'd
like to instead copy some (<code>width</code>, <code>height</code>) rectangle from
(<code>source_x</code>, <code>source_y</code>) to some point (<code>dest_x</code>, <code>dest_y</code>) on the
destination you would instead compute a new position for the source
surface origin and then use <code>cairo_fill</code> instead of <code>cairo_paint</code>:</p>

<pre><code>cairo_set_source_surface (cr, dest_x - source_x, dest_y - source_y)
cairo_rectangle (cr, dest_x, dest_y, width, height);
cairo_fill (cr);
</code></pre>

<p>And note that using a surface as the source pattern will work with any
other cairo drawing operation as well. You can use
<code>cairo_set_source_surface</code> to get patterned effects from cairo_stroke or
<code>cairo_show_text</code> just as easily.</p>

<p>Finally, by default cairo uses the <code>OVER</code> operator when drawing, so if
the source surface contains alpha content, then it will be used to
blend the source over the destination. This is often exactly what is
desired, but if you would like to directly copy alpha information from
the source to the destination without blending, then you can use
<code>cairo_set_operator</code> with <code>CAIRO_OPERATOR_SOURCE</code> to do that, (see
<a href="#clear_a_surface">clearing a surface</a> for some examples using
<code>CAIRO_OPERATOR_SOURCE</code>).</p>

<h2 id="sharp_lines">How do I draw a sharp, single-pixel-wide line?</h2>

<p>Question: Whenever I try drawing with a line-width of 1.0, my
horizontal/vertical lines come out fat and blurry (eg. 2 pixels wide
and half-intensity). What's wrong?</p>

<p>Answer: This problem usually shows up with code like the following,
(and with the default transformation matrix):</p>

<pre><code>cairo_move_to (cr, 10, 10);
cairo_line_to (cr, 20, 10);
cairo_set_line_width (cr, 1);
cairo_stroke (cr);
</code></pre>

<p>The user expects 10 pixels in one row to be affected, but instead the
line is "smeared" over 20 pixels in two rows.</p>

<p>The reason this happens is easy to explain to someone who believes
pixels are little squares. By default, integer coordinates map to the
intersections of the pixel squares. So a width-1 horizontal/vertical
line is centered on the boundary between pixel rows and extends half
way into the pixels on either side.</p>

<p>When some people hear pixels described as little squares it sets their
teeth on edge. For them we have this alternate explanation. By
default, integer coordinates map to points half way between sample
point locations. So a width-1 horizontal/vertical will be centered
between two rows of pixel sample points and will contribute equally to
the pixels on either side, (assuming a symmetric filter which is
always the case when synthesizing images in cairo).</p>

<p>Either way, you can avoid the issue by using an even-integer line
width, (note that the default line width in cairo is 2.0). A line
drawn this way will still affect just as many pixels, but they will be
affected at full intensity.</p>

<p>Otherwise, if you really want to light up a single row of pixels at
full intensity, you can do that by adjusting the endpoints by 0.5 in
the appropriate direction. For example, by changing the above code to:</p>

<pre><code>cairo_move_to (cr, 10, 10.5);
cairo_line_to (cr, 20, 10.5);
cairo_set_line_width (cr, 1);
cairo_stroke (cr);
</code></pre>

<p>The reason that cairo does it this way is so that fills align nicely,
at the cost that some strokes do not. It is not possible to set up
sample locations in a way so that both fills and strokes with integer
coordinates work nicely, so one had to be preferred over the
other. One argument in favor of preferring fills is that all fills
with integer coordinates align nicely this way. The best that can be
done with strokes is to make all even-integer-width strokes align
nicely (as they do in cairo) or to make odd-integer-width strokes
align (which would then break the fill alignment).</p>

<p>It is important to note that all of this discussion assumes the
default transformation matrix. Under other transformations, the
relationship between user-space coordinates and device-space pixels
may be quite different. Guaranteeing alignment with the device-pixel
grid, "snapping", in such cases is still possible and is often worth
doing (except in situations such as animated zooms where the snapping
would lead to undesired jitter in the result). The trick to snapping
is simply to perform rounding in device-space so that rectilinear
geometry lands at integer position in the device-space grid. So, the
process might look something like:</p>

<pre><code>cairo_user_to_device (cr, &amp;x, &amp;y);
do_rounding (&amp;x, &amp;y);
cairo_device_to_user (cr, &amp;x, &amp;y);
</code></pre>

<p>and then using the resulting x and y values to construct a path. Note
that the <code>do_rounding</code> function will likely need to be different
depending on how the coordinates are being used. For example, for a
fill or a stroke with an even-integer line width, this function might
round to the nearest integer. For a stroke with an odd-integer line
width, it might round to the nearest half integer.</p>

<h2 id="using_pango">How do I use pango instead of cairo's "toy" text
API?</h2>

<p>In the <a href="#getting_started">getting started</a> example, we
showed how simple it can be to display a few text characters with
cairo:</p>

<pre><code>cairo_select_font_face (cr, "serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
cairo_set_font_size (cr, 32.0);
cairo_set_source_rgb (cr, 0.0, 0.0, 1.0);
cairo_move_to (cr, 10.0, 50.0);
cairo_show_text (cr, "Hello, world");
</code></pre>

<p>But as you read the cairo documentation and talk to expert cairo
users, you learn that <code>cairo_show_text</code> is part of cairo's "toy" text
API. It's fine for quick demos, and for learning how to use cairo, but
it's not intended for use in actual applications.</p>

<p>It's not hard to run into some of the limitations of
<code>cairo_show_text</code>. For example, it will only display glyphs from a
single font. So if you happen to choose a font that doesn't provide
glyphs covering every character in your string, then some characters
just won't appear. It has a host of other limitations with respect to
layout, ligatures, and shaping. We won't go into all of those details
here, but suffice it to say that if you have any aspirations of having
reasonable, internationalized text display in your application, then
you don't want to be using <code>cairo_show_text</code>.</p>

<p>Meanwhile, the non-toy APIs in cairo, (<code>cairo_show_glyphs</code> and
<code>cairo_show_text_glyphs</code>), are really hard to use. Compared to
<code>cairo_show_text</code>, these still don't do any of the heavy lifting of
text, but instead expect that the caller has done all of that
already. So you could use these as the basis of a sophisticated
text-layout engine, but chances are that you'd rather spend the next
several years on your application instead.</p>

<p>Fortunately, the pango library exists and does do sophisticated text
layout, shaping, etc. and integrates very nicely with cairo. We
heartily recommend that "real" applications wanting to display
text with cairo use pango to do it.</p>

<p>And it's really not that hard to get started using pango. The
pango-using equivalent of our code above is:</p>

<pre><code>#include &lt;pango/pangocairo.h&gt;
PangoLayout *layout;
PangoFontDescription *font_description;

font_description = pango_font_description_new ();
pango_font_description_set_family (font_description, "serif");
pango_font_description_set_weight (font_description, PANGO_WEIGHT_BOLD);
pango_font_description_set_absolute_size (font_description, 32 * PANGO_SCALE);

layout = pango_cairo_create_layout (cr);
pango_layout_set_font_description (layout, font_description);
pango_layout_set_text (layout, "Hello, world", -1);

cairo_set_source_rgb (cr, 0.0, 0.0, 1.0);
cairo_move_to (cr, 10.0, 50.0);
pango_cairo_show_layout (cr, layout);

g_object_unref (layout);
pango_font_description_free (font_description);
</code></pre>

<p>Note that this does have slightly different text placement from the
previous example. To get the same text origin as <code>cairo_show_text</code>,
(baseline left, instead of Pango's top left), replace the
<code>pango_cairo_show_layout</code> line with this:</p>

<pre><code>pango_cairo_show_layout_line (cr, pango_layout_get_line (layout, 0));
</code></pre>

<p>Finally, to compile a pango-using program, you'll want to change the
compilation flags we suggested before from <code>&#036;(pkg-config --cflags
--libs cairo)</code> to <code>&#036;(pkg-config --cflags --libs pangocairo)</code>.</p>

<p>Hopefully that's enough to get started using pango. See the <a href="http://library.gnome.org/devel/pango/stable/">Pango
Reference Manual</a> for
more details as needed.</p>

<h1 id="performance_concerns">Performance concerns</h1>

<h2 id="clipping_performance">Clipping should only make things faster, right?</h2>

<p>The <code>cairo_clip</code> function can be used for two different operations. The
first is to restrict the set of pixels that need to be updated,
(imagine needing to draw only half of a window that was just uncovered
by another window). While the second is to modify what is being drawn
with some non-pixel-aligned shape (imagine a circular clip path, for
example).</p>

<p>These two uses result in very different code paths inside cairo and in
the underlying window system. The first case can result in faster
performance compared to unclipped drawing, since the same drawing
operations can be performed but fewer pixels are updated. The second
case can actually result in slower performance as an extra compositing
step must be added to get the clipped result. This is because the
pixels on the edge of the mask will have different values than they
would in the unclipped case, (a non-pixel-aligned clip path results in
antialiased clipping).</p>

<p>So there's a bit of a performance trap there as one might add clipping
to try to speed things up and inadvertently cause things to go
slower. The trick to get fast clipping is to ensure the path is always
aligned with integer positions on the device-pixel grid. And the
easiest way to do that is to use an identity transformation,
(<code>cairo_identity_matrix</code>), and construct the path by calling
<code>cairo_rectangle</code> with integer values.</p>

<h2 id="profiling">My application's slower than I think it should be.
What can I do to help the cairo community find the problem?</h2>

<p>The first step in analysing any problem is constructing a reproducible
test case. Cairo provides a cairo-trace utility (currently only
available from the git development tree and in the 1.9.2
<a href="/snapshots">snapshot</a> but also planned for inclusion with Cairo
1.10).  This utility records all Cairo calls made by an application
and allows you, and everyone else in the community, to replay the
exact same sequence. This trace can be reviewed by others and they may
be able to suggest alternative methods of achieving the same
results. Or it may provide the developers with a useful benchmark for
improving Cairo.</p>

<h3>How to generate a trace:</h3>

<p>After installing Cairo from git, a 1.9 snapshot or a later release the cairo-trace utility will be available.</p>

<pre><code>&#036; cairo-trace
usage: cairo-trace [--no-file] command
cairo-trace will generate a log of all calls made by command to
cairo. This log will be stored in a file in the local directory
called command.pid.trace.
Whatever else happens is driven by its argument:
  --flush         - Flush the output trace after every call.
  --no-file       - Disable the creation of an output file. Outputs to the terminal instead.
  --no-callers    - Do not lookup the caller address/symbol/line whilst tracing.
  --mark-dirty    - Record image data for cairo_mark_dirty() [default]
  --no-mark-dirty - Do not record image data for cairo_mark_dirty()
  --compress      - Compress the output with LZMA
  --profile       - Combine --no-callers and --no-mark-dirty and --compress
</code></pre>

<p>That is performing</p>

<pre><code>&#036; cairo-trace any-application
</code></pre>

<p>and then operating the application as desired will generate an output
file called any-application.$pid.trace.</p>

<p>If you want to record a trace to share with others for performance
measurement, then use the --profile option to cairo-trace as follows:</p>

<pre><code>&#036; cairo-trace --profile any-application
</code></pre>

<p>This eliminates the extra caller information from the trace, (which
reduces overhead when replaying), and compresses the output,
(decompress with the "lzma -cd").</p>

<h3>How to benchmark an existing trace:</h3>

<p>To benchmark the performance of a trace, run:</p>

<pre><code>&#036; cairo-perf-trace application.trace
</code></pre>

<p>which will replay the trace several times against multiple backends
and report the time required for replay against each backend.</p>

<h3>What traces has the community collected?</h3>

<p>A compilation of "interesting" traces can be found in the
<a href="http://cgit.freedesktop.org/cairo-traces">cairo-traces
repository</a>. This collection
includes traces of various uses of common applications such as
firefox, gnome-terminal, swfdec (including viewing youtube), and
poppler.</p>

<p>By checking this repository out to perf/cairo-traces in the cairo
source directory, these traces will be automatically run by
"cairo-perf-trace" (with no arguments) as well as by "make perf".</p>

</div>

<div id="footer">


<div class="actions">
<ul>

<li><a href="http://cairographics.org/ikiwiki?page=FAQ&amp;do=edit">Edit</a></li>


<li><a href="../recentchanges/">RecentChanges</a></li>



<li><a href="http://cairographics.org/ikiwiki?do=prefs">Preferences</a></li>


</ul>
</div>


<div id="pageinfo">




<div id="backlinks">
Links:

<a href="../documentation/">documentation</a>

<a href="../tutorial/">tutorial</a>


</div>


<div class="pagedate">
Last edited <span class="date">Sun Nov 29 22:01:12 2009</span>
</div>

</div>

<!-- from cairographics.org -->
</div>

</body>
</html>

------------isQBxJSTtAqOfiLALXktuF
Content-Disposition: inline; filename=style.css
Content-Type: text/css; charset=UTF-8; name=style.css
Content-Location: http://www.cairographics.org/style.css
Content-Transfer-Encoding: 8bit

/* ikiwiki style sheet */

/* Note that instead of modifying this style sheet, you can instead edit
 * local.css and use it to override or change settings in this one.
 */

.header {
	margin: 0;
	font-weight: bold;
	line-height: 1em;
	display: block;
}

.author {
	margin: 0;
	font-weight: bold;
	display: block;
}

.actions ul {
	margin: 0;
	padding: 6px;
	list-style-type: none;
}

.inlinepage .actions ul {
	border-bottom: 0;
}

.actions li {
	display: inline;
	padding: .2em .4em;
}

.tags {
	clear: both;
}

#footer {
	border-top: 1px solid #000;
}

div.tags {
	margin-top: 1em;
}

#backlinks {
	margin-top: 1em;
}

#searchform {
	display: inline;
	float: right;
}

#editcontent {
	width: 100%;
}

img {
	border-style: none;
}

/* Stuff for the RecentChanges table. */
tr.changeheader {
	background: #eee;
	color: black !important;
}
tr.changeinfo {
	background: #eee;
	color: black !important;
}
th.changeheader {
	padding: 1px .3em;
}
td.changeinfo {
	padding: 1px .3em;
}
td.changetime {
	white-space: nowrap;
	padding: 1px .3em;
}
td.changelog {
	font-style: italic;
}

/* Used for adding a blog page. */
#blogform {
	padding: 10px 10px;
	border: 1px solid #aaa;
	background: #eee;
	color: black !important;
}

.inlinepage {
	padding: 10px 10px;
	border: 1px solid #aaa;
}

/* Used for invalid form fields. */
.fb_invalid {
	color: red;
	background: white !important;
}

/* Used for required form fields. */
.fb_required {
	font-weight: bold;
}

/* Orange feed button. */
.feedbutton {
	background: #ff6600;
	color: white !important;
	border-left: 1px solid #cc9966;
	border-top: 1px solid #ccaa99;
	border-right: 1px solid #993300;
	border-bottom: 1px solid #331100;
	padding: 0px 0.5em 0px 0.5em;
	font-family: sans-serif;
	font-weight: bold;
	font-size: small;
	text-decoration: none;
	margin-top: 1em;
}
.feedbutton:hover {
	color: white !important;
	background: #ff9900;
}

/* Tag cloud. */
.pagecloud {
	float: right;
	width: 30%;
	text-align: center;
	padding: 10px 10px;
	border: 1px solid #aaa;
	background: #eee;
	color: black !important;
}
.smallestPC { font-size: 70%; }
.smallPC { font-size: 85%; }
.normalPC { font-size: 100%; }
.bigPC { font-size: 115%; }
.biggestPC { font-size: 130%; }

#sidebar {
	line-height: 3ex;
	width: 20ex;
	float: right;
	margin-left: 40px;
	margin-bottom: 40px;
	padding: 2ex 2ex;
}

/* outlines */
li.L1 {
	list-style: upper-roman;
}
li.L2 {
	list-style: decimal;
}
li.L3 {
	list-style: lower-alpha;
}
li.L4 {
	list-style: disc;
}
li.L5 {
	list-style: square;
}
li.L6 {
	list-style: circle;
}
li.L7 {
	list-style: lower-roman;
}
li.L8 {
	list-style: upper-alpha;
}

hr.poll {
	height: 10pt;
	color: white !important;
	background: #eee;
	border: 2px solid black;
}
div.poll {
	margin-top: 1ex;
	margin-bottom: 1ex;
	padding: 1ex 1ex;
	border: 1px solid #aaa;
}

input#openid_url {
	background: url(wikiicons/openidlogin-bg.gif) no-repeat;
	background-color: #fff;
	background-position: 0 50%;
	color: #000;
	padding-left: 18px;
}

/* Things to hide in printouts. */
@media print {
	.actions { display: none; }
	.tags { display: none; }
	.feedbutton { display: none; }
	#searchform { display: none; }
	#blogform { display: none; }
	#backlinks { display: none; }
}

/* Provided for use by template plugin for floating info boxes. */
.infobox {
	float: right;
	margin-left: 2ex;
	margin-top: 1ex;
	margin-bottom: 1ex;
	padding: 1ex 1ex;
	border: 1px solid #aaa;
}

/* Provided for use by template plugin for floating note boxes. */
.notebox {
	float: right;
	margin-left: 2ex;
	margin-top: 1ex;
	margin-bottom: 1ex;
	padding: 1ex 1ex;
	border: 1px solid #aaa;
	width: 25%
}

/* Used by the popup template and for backlinks hiding. */
.popup {
	border-bottom: 1px dotted #366;
	color: #366;
}
.popup .balloon,
.popup .paren,
.popup .expand {
	display: none;
}
.popup:hover .balloon,
.popup:focus .balloon {
	position: absolute;
	display: inline;
	margin: 1em 0 0 -2em;
	padding: 0.625em;
	border: 2px solid;
	background-color: #dee;
	color: black;
	
	/* Nonstandard, but very nice. */
	/*
	opacity: 0.95;
	-moz-opacity: 0.95;
	filter: alpha(opacity=95);
	*/
}

/* Formbuilder styling */
fieldset {
	margin: 1ex 0;
	border: 1px solid black;
}
legend {
	padding: 0 1ex;
}
.fb_submit {
	float: left;
	margin: 2px 0;
}
#signin_openid_url_label {
	float: left;
	margin-right: 1ex;
}
#signin_openid {
	padding: 10px 10px;
	border: 1px solid #aaa;
	background: #eee; 
	color: black !important;
}

------------isQBxJSTtAqOfiLALXktuF
Content-Disposition: inline; filename=local.css
Content-Type: text/css; charset=UTF-8; name=local.css
Content-Location: http://www.cairographics.org/local.css
Content-Transfer-Encoding: 8bit

/* ikiwiki local style sheet */

/* Add local styling here, instead of modifying style.css. */
body {
    margin-left: 4%;
    margin-right: 4%;
    color: black;
    background-color: white;
}

h1, .header, #footer, #title {
    clear: both;
}

.header {
    padding-bottom: 1em;
}

img {
	border: none;
}

h1,h2,h3,h4,h5,h6, .header, #title {
    font-family: sans-serif;
    clear: both;
    color: #f39914;
}

h1, #title {
    font-weight: bold;
    font-size: 150%;
}

h2,h3,h4,h5,h6 {
    margin-left: 2%;
    margin-right: 2%;
    font-size: 125%;
}

p, ol, ul, hr, table {
    margin-left: 4%;
    margin-right: 4%;
}

ol ol {
    margin-left: 0%;
    list-style-type: lower-alpha;
}

ul ul {
    margin-left: 0;
}

li p {
    margin-left: 0%;
}

pre {
    font-family: mono;
    margin-left: 10%;
    margin-right: 10%;
    border: 1px solid #c5c5f6;
    background-color: #dbdbf7;
    padding: .5em;
}

a:link {
    color: #4c4ce6;
}

a:visited {
    color: #8f8fe6;
}

a:hover {
    color: #f29915;
    text-decoration: underline;
}

#logo {
    text-align: center;
}

#footer {
    padding-top: .25em;
    font-size: 80%;
}

#legal {
    clear: both;
    text-align: center;
    margin-top: 2em;
    margin-left: 15%;
    margin-right: 15%;
}

#pageinfo {
    float: right;
    text-align: right;
    width: 49%;
    clear: none;
}

.actions {
    float: left;
    width: 49%;
    text-align: left;
}

.actions ul {
    padding: 0;
}

.actions ul li {
    padding-left: 0;
    padding-right: .5em;
}

.left {
    float: left;
    padding-right: 0.5em;
}

.right {
    float: right;
    padding-left: 0.5em;
}

hr {
    height: 1px;
    border: 0;
    color: black;
    background-color: black;
}

/* Navigation list styling courtesy of Listamatic:
 *
 *	Centred List Navbar Updated
 *	http://css.maxdesign.com.au/listamatic/horizontal27.htm
 */
#navcontainer ul {
    text-align: center;
    padding-bottom: 5px;
    padding-top: 5px;
    padding-left: 0;
    margin-top: 0;
    /* cancels gap caused by top padding in Opera 7.54 */
    margin-left: 0;
    background-color: #162284;
    color: white;
    width: 100%;
    font-family: Arial,Helvetica,sans-serif;
    font-weight: bold;
    line-height: 18px;
    /* fixes Firefox 0.9.3 */
}

#navcontainer ul li {
    display: inline;
    padding-left: 0;
    padding-right: 0;
    padding-bottom: 5px;
    /* matches link padding except for left and right */
    padding-top: 5px;
}

#navcontainer ul li a {
    padding-left: 10px;
    padding-right: 10px;
    padding-bottom: 5px;
    padding-top: 5px;
    color: white;
    text-decoration: none;
    border-right: 1px solid #fff;
}

#navcontainer ul li a:hover {
    color: #f39914;
}

#navcontainer #active {
    border-left: 1px solid #fff;
}

div.tutright {
	float:right;
	background-color: #eee;
	border: solid 1px #888;
	padding: 0.5em;
	margin-left: 1em;
}

div.tutright img {
	margin: 0px;
}
div.clear {
	clear: both;
}
a {
	text-decoration: none;
}
table {
	border: solid #aaa 1px;
	border-spacing: 1px;
}
td, th {
	border: solid #aaa 1px;
	padding: 5px;
}

------------isQBxJSTtAqOfiLALXktuF
Content-Disposition: inline; filename=cairo-banner.png
Content-Type: image/png; name=cairo-banner.png
Content-Location: http://www.cairographics.org/cairo-banner.png
Content-Transfer-Encoding: Base64

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

------------isQBxJSTtAqOfiLALXktuF--
